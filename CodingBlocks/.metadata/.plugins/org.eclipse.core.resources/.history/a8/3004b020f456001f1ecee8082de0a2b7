package behavioral.interpreter;

//Expression Interface
interface Expression {
 boolean interpret(String context);
}

//Terminal Expression
class TerminalExpression implements Expression {
 private String data;

 public TerminalExpression(String data) {
     this.data = data;
 }

 public boolean interpret(String context) {
     return context.contains(data);
 }
}

//Or Expression
class OrExpression implements Expression {
 private Expression expr1;
 private Expression expr2;

 public OrExpression(Expression expr1, Expression expr2) {
     this.expr1 = expr1;
     this.expr2 = expr2;
 }

 public boolean interpret(String context) {
     return expr1.interpret(context) || expr2.interpret(context);
 }
}

//And Expression
class AndExpression implements Expression {
 private Expression expr1;
 private Expression expr2;

 public AndExpression(Expression expr1, Expression expr2) {
     this.expr1 = expr1;
     this.expr2 = expr2;
 }

 public boolean interpret(String context) {
     return expr1.interpret(context) && expr2.interpret(context);
 }
}

