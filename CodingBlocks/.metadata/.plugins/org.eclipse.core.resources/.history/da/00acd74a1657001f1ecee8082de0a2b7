package structural.facade;

//The Facade pattern provides a simplified interface to a complex system of classes, libraries, or frameworks.
//It hides the complexities of the system and provides an easy-to-use interface to the client.


//Complex subsystem
class CPU {
	public void start() {
		System.out.println("CPU started");
	}
}

class Memory {
	public void load() {
		System.out.println("Memory loaded");
	}
}

class HardDrive {
	public void readData() {
		System.out.println("Hard Drive reading data");
	}
}

//Facade
class ComputerFacade {
	private CPU cpu;
	private Memory memory;
	private HardDrive hardDrive;

	public ComputerFacade() {
		this.cpu = new CPU();
		this.memory = new Memory();
		this.hardDrive = new HardDrive();
	}

	public void startComputer() {
		cpu.start();
		memory.load();
		hardDrive.readData();
		System.out.println("Computer started");
	}
}

