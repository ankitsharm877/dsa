package behavioral.command;

//The Command pattern encapsulates a request as an object, thereby allowing users to parameterize clients with queues, requests, and operations. 
//It also provides support for undoable operations.

//Command Interface
interface Command {
	void execute();
}

//Receiver
class Light {
	public void turnOn() {
		System.out.println("The light is on");
	}

	public void turnOff() {
		System.out.println("The light is off");
	}
}

//Concrete Command
class LightOnCommand implements Command {
	private Light light;

	public LightOnCommand(Light light) {
		this.light = light;
	}

	public void execute() {
		light.turnOn();
	}
}

class LightOffCommand implements Command {
	private Light light;

	public LightOffCommand(Light light) {
		this.light = light;
	}

	public void execute() {
		light.turnOff();
	}
}

//Invoker
class RemoteControl {
	private Command command;

	public void setCommand(Command command) {
		this.command = command;
	}

	public void pressButton() {
		command.execute();
	}
}

