package structural.flyweight;

import java.util.HashMap;
import java.util.Map;

//The Flyweight pattern reduces the memory footprint by sharing as much data as possible with similar objects. 
//It is typically used to manage a large number of similar objects efficiently.

//Flyweight
interface Shape {
	void draw();
}

//Concrete Flyweight
class Circle implements Shape {
	private String color;
	private int x, y, radius;

	public Circle(String color) {
		this.color = color;
	}

	public void setX(int x) {
		this.x = x;
	}

	public void setY(int y) {
		this.y = y;
	}

	public void setRadius(int radius) {
		this.radius = radius;
	}

	public void draw() {
		System.out.println("Drawing Circle [Color: " + color + ", x: " + x + ", y:" + y + ", radius:" + radius + "]");
	}
}

//Flyweight Factory
class ShapeFactory {
	private static final Map<String, Shape> circleMap = new HashMap<>();

	public static Shape getCircle(String color) {
		Circle circle = (Circle) circleMap.get(color);

		if (circle == null) {
			circle = new Circle(color);
			circleMap.put(color, circle);
			System.out.println("Creating circle of color: " + color);
		}
		return circle;
	}
}
