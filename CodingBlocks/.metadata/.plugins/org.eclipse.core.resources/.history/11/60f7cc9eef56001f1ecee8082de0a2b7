package structural.adapter;

//The Adapter pattern allows incompatible interfaces to work together. 
//It acts as a bridge between two incompatible interfaces by wrapping an existing class with a new interface.

//Existing class with a different interface
class LegacyRectangle {
	public void draw(int x, int y, int width, int height) {
		System.out
				.println("Drawing rectangle from (" + x + ", " + y + ") with width " + width + " and height " + height);
	}
}

//Target interface
interface Shape {
	void draw(int x, int y, int z, int j);
}

//Adapter class
class RectangleAdapter implements Shape {
	private LegacyRectangle adaptee;

	public RectangleAdapter(LegacyRectangle adaptee) {
		this.adaptee = adaptee;
	}

	public void draw(int x, int y, int width, int height) {
		adaptee.draw(x, y, width, height);
	}
}

